diff --git a/lib/auth_cert.c b/lib/auth_cert.c
index 9d78ff8..ee65c1e 100644
--- a/lib/auth_cert.c
+++ b/lib/auth_cert.c
@@ -1476,7 +1476,7 @@ _gnutls_proc_cert_cert_req (gnutls_session_t session, opaque * data,
       p += 2;
       DECR_LEN (dsize, hash_num);
 
-      ret = _gnutls_sign_algorithm_parse_data (session, p, hash_num);
+      ret = _gnutls_sign_algorithm_parse_data (session, p, hash_num, 1);
       if (ret < 0)
         {
           gnutls_assert ();
@@ -1737,7 +1737,7 @@ _gnutls_gen_cert_server_cert_req (gnutls_session_t session, opaque ** data)
   if (_gnutls_version_has_selectable_sighash (ver))
     {
       ret =
-        _gnutls_sign_algorithm_write_params (session, pdata, signalgosize);
+        _gnutls_sign_algorithm_write_params (session, pdata, signalgosize, 1);
       if (ret < 0)
         {
           gnutls_assert ();
diff --git a/lib/ext_signature.c b/lib/ext_signature.c
index a269fe5..3e81fa0 100644
--- a/lib/ext_signature.c
+++ b/lib/ext_signature.c
@@ -72,7 +72,8 @@ typedef struct
  */
 int
 _gnutls_sign_algorithm_write_params (gnutls_session_t session, opaque * data,
-                                     size_t max_data_size)
+                                     size_t max_data_size,
+                                     unsigned cert_verify)
 {
   opaque *p = data, *len_p;
   int len, i, j, hash;
@@ -91,13 +92,16 @@ _gnutls_sign_algorithm_write_params (gnutls_session_t session, opaque * data,
 
   for (i = j = 0; j < session->internals.priorities.sign_algo.algorithms; i += 2, j++)
     {
-      /* In gnutls we keep a state of SHA1 and SHA256 and thus cannot
-       * use anything else.
-       */
-      hash = _gnutls_sign_get_hash_algorithm(session->internals.priorities.sign_algo.priority[j]);
-      if (hash != GNUTLS_DIG_SHA1 && hash != GNUTLS_DIG_SHA256)
-        continue;
-      
+      if (cert_verify)
+        {
+          /* In gnutls we keep a state of SHA1 and SHA256 and thus cannot
+           * use anything else.
+           */
+          hash = _gnutls_sign_get_hash_algorithm(session->internals.priorities.sign_algo.priority[j]);
+          if (hash != GNUTLS_DIG_SHA1 && hash != GNUTLS_DIG_SHA256)
+            continue;
+        }
+
       aid =
         _gnutls_sign_to_tls_aid (session->internals.priorities.
                                  sign_algo.priority[j]);
@@ -125,7 +129,7 @@ _gnutls_sign_algorithm_write_params (gnutls_session_t session, opaque * data,
  */
 int
 _gnutls_sign_algorithm_parse_data (gnutls_session_t session,
-                                   const opaque * data, size_t data_size)
+                                   const opaque * data, size_t data_size, unsigned cert_verify)
 {
   int sig, i, hash;
   sig_ext_st *priv;
@@ -156,9 +160,12 @@ _gnutls_sign_algorithm_parse_data (gnutls_session_t session,
 
       if (sig != GNUTLS_SIGN_UNKNOWN)
         {
-          hash = _gnutls_sign_get_hash_algorithm(sig);
-          if (hash != GNUTLS_DIG_SHA1 && hash != GNUTLS_DIG_SHA256)
-            continue;
+          if (cert_verify)
+            { /* we cannot handle anything else than SHA1 or SHA256 */
+              hash = _gnutls_sign_get_hash_algorithm(sig);
+              if (hash != GNUTLS_DIG_SHA1 && hash != GNUTLS_DIG_SHA256)
+                continue;
+            }
 
           priv->sign_algorithms[priv->sign_algorithms_size++] = sig;
           if (priv->sign_algorithms_size == MAX_SIGNATURE_ALGORITHMS)
@@ -212,7 +219,7 @@ _gnutls_signature_algorithm_recv_params (gnutls_session_t session,
           len = _gnutls_read_uint16 (data);
           DECR_LEN (data_size, len);
 
-          ret = _gnutls_sign_algorithm_parse_data (session, data + 2, len);
+          ret = _gnutls_sign_algorithm_parse_data (session, data + 2, len, 0);
           if (ret < 0)
             {
               gnutls_assert ();
@@ -240,7 +247,7 @@ _gnutls_signature_algorithm_send_params (gnutls_session_t session,
       if (session->internals.priorities.sign_algo.algorithms > 0)
         {
           ret =
-            _gnutls_sign_algorithm_write_params (session, data, data_size);
+            _gnutls_sign_algorithm_write_params (session, data, data_size, 0);
           if (ret < 0)
             {
               gnutls_assert ();
diff --git a/lib/ext_signature.h b/lib/ext_signature.h
index 889e26d..b566842 100644
--- a/lib/ext_signature.h
+++ b/lib/ext_signature.h
@@ -35,9 +35,9 @@ extern extension_entry_st ext_mod_sig;
 gnutls_sign_algorithm_t
 _gnutls_session_get_sign_algo (gnutls_session_t session, gnutls_cert* cert);
 int _gnutls_sign_algorithm_parse_data (gnutls_session_t session,
-                                       const opaque * data, size_t data_size);
+                                       const opaque * data, size_t data_size, unsigned cert_verify);
 int _gnutls_sign_algorithm_write_params (gnutls_session_t session,
-                                         opaque * data, size_t max_data_size);
+                                         opaque * data, size_t max_data_size, unsigned cert_verify);
 int _gnutls_session_sign_algo_enabled (gnutls_session_t session,
                                        gnutls_sign_algorithm_t sig);
 int cert_compatible_with_sig(gnutls_cert* cert, gnutls_protocol_t ver, 
