diff --git a/lib/crypto.c b/lib/crypto.c
index 853df9e..cbc27d3 100644
--- a/lib/crypto.c
+++ b/lib/crypto.c
@@ -153,18 +153,9 @@ _gnutls_crypto_deregister (void)
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new cipher's data
  *
- * This function will register a cipher algorithm to be used by
- * gnutls.  Any algorithm registered will override the included
- * algorithms and by convention kernel implemented algorithms have
- * priority of 90.  The algorithm with the lowest priority will be
- * used by gnutls.
+ * This function is a no-op.
  *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience
- * gnutls_crypto_single_cipher_register() macro.
- *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -173,13 +164,7 @@ gnutls_crypto_single_cipher_register2 (gnutls_cipher_algorithm_t algorithm,
                                        int priority, int version,
                                        const gnutls_crypto_cipher_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  return _algo_register (&glob_cl, algorithm, priority, s);
+  return 0;
 }
 
 const gnutls_crypto_cipher_st *
@@ -194,18 +179,9 @@ _gnutls_get_crypto_cipher (gnutls_cipher_algorithm_t algo)
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new generator's data
  *
- * This function will register a random generator to be used by
- * gnutls.  Any generator registered will override the included
- * generator and by convention kernel implemented generators have
- * priority of 90.  The generator with the lowest priority will be
- * used by gnutls.
- *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience
- * gnutls_crypto_rnd_register() macro.
+ * This function is a no-op.
  *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -213,20 +189,7 @@ int
 gnutls_crypto_rnd_register2 (int priority, int version,
                              const gnutls_crypto_rnd_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  if (crypto_rnd_prio > priority)
-    {
-      memcpy (&_gnutls_rnd_ops, s, sizeof (*s));
-      crypto_rnd_prio = priority;
-      return 0;
-    }
-
-  return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
+  return 0;
 }
 
 /**
@@ -236,17 +199,9 @@ gnutls_crypto_rnd_register2 (int priority, int version,
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new algorithms's data
  *
- * This function will register a MAC algorithm to be used by gnutls.
- * Any algorithm registered will override the included algorithms and
- * by convention kernel implemented algorithms have priority of 90.
- * The algorithm with the lowest priority will be used by gnutls.
- *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience
- * gnutls_crypto_single_mac_register() macro.
+ * This function is a no-op.
  *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -255,13 +210,7 @@ gnutls_crypto_single_mac_register2 (gnutls_mac_algorithm_t algorithm,
                                     int priority, int version,
                                     const gnutls_crypto_mac_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  return _algo_register (&glob_ml, algorithm, priority, s);
+  return 0;
 }
 
 const gnutls_crypto_mac_st *
@@ -277,18 +226,9 @@ _gnutls_get_crypto_mac (gnutls_mac_algorithm_t algo)
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new algorithms's data
  *
- * This function will register a digest (hash) algorithm to be used by
- * gnutls.  Any algorithm registered will override the included
- * algorithms and by convention kernel implemented algorithms have
- * priority of 90.  The algorithm with the lowest priority will be
- * used by gnutls.
+ * This function is a no-op.
  *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience
- * gnutls_crypto_single_digest_register() macro.
- *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -297,13 +237,7 @@ gnutls_crypto_single_digest_register2 (gnutls_digest_algorithm_t algorithm,
                                        int priority, int version,
                                        const gnutls_crypto_digest_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  return _algo_register (&glob_dl, algorithm, priority, s);
+  return 0;
 }
 
 const gnutls_crypto_digest_st *
@@ -318,21 +252,9 @@ _gnutls_get_crypto_digest (gnutls_digest_algorithm_t algo)
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new interface's data
  *
- * This function will register an interface for gnutls to operate
- * on big integers. Any interface registered will override
- * the included interface. The interface with the lowest
- * priority will be used by gnutls.
- *
- * Note that the bigint interface must interoperate with the public
- * key interface. Thus if this interface is updated the
- * gnutls_crypto_pk_register() should also be used.
+ * This function is a no-op.
  *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience gnutls_crypto_bigint_register()
- * macro.
- *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -340,20 +262,7 @@ int
 gnutls_crypto_bigint_register2 (int priority, int version,
                                 const gnutls_crypto_bigint_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  if (crypto_bigint_prio > priority)
-    {
-      memcpy (&_gnutls_mpi_ops, s, sizeof (*s));
-      crypto_bigint_prio = priority;
-      return 0;
-    }
-
-  return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
+  return 0;
 }
 
 /**
@@ -362,21 +271,9 @@ gnutls_crypto_bigint_register2 (int priority, int version,
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new interface's data
  *
- * This function will register an interface for gnutls to operate
- * on public key operations. Any interface registered will override
- * the included interface. The interface with the lowest
- * priority will be used by gnutls.
+ * This function is a no-op.
  *
- * Note that the bigint interface must interoperate with the bigint
- * interface. Thus if this interface is updated the
- * gnutls_crypto_bigint_register() should also be used.
- *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience gnutls_crypto_pk_register()
- * macro.
- *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -384,20 +281,7 @@ int
 gnutls_crypto_pk_register2 (int priority, int version,
                             const gnutls_crypto_pk_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  if (crypto_pk_prio > priority)
-    {
-      memcpy (&_gnutls_pk_ops, s, sizeof (*s));
-      crypto_pk_prio = priority;
-      return 0;
-    }
-
-  return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
+  return 0;
 }
 
 /**
@@ -406,18 +290,9 @@ gnutls_crypto_pk_register2 (int priority, int version,
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new interface's data
  *
- * This function will register a cipher interface to be used by
- * gnutls. Any interface registered will override the included engine
- * and by convention kernel implemented interfaces should have
- * priority of 90. The interface with the lowest priority will be used
- * by gnutls.
+ * This function is a no-op.
  *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience
- * gnutls_crypto_cipher_register() macro.
- *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -425,20 +300,7 @@ int
 gnutls_crypto_cipher_register2 (int priority, int version,
                                 const gnutls_crypto_cipher_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  if (crypto_cipher_prio > priority)
-    {
-      memcpy (&_gnutls_cipher_ops, s, sizeof (*s));
-      crypto_cipher_prio = priority;
-      return 0;
-    }
-
-  return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
+  return 0;
 }
 
 /**
@@ -447,18 +309,9 @@ gnutls_crypto_cipher_register2 (int priority, int version,
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new interface's data
  *
- * This function will register a mac interface to be used by
- * gnutls. Any interface registered will override the included engine
- * and by convention kernel implemented interfaces should have
- * priority of 90. The interface with the lowest priority will be used
- * by gnutls.
+ * This function is a no-op.
  *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience
- * gnutls_crypto_digest_register() macro.
- *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -466,20 +319,7 @@ int
 gnutls_crypto_mac_register2 (int priority, int version,
                              const gnutls_crypto_mac_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  if (crypto_mac_prio > priority)
-    {
-      memcpy (&_gnutls_mac_ops, s, sizeof (*s));
-      crypto_mac_prio = priority;
-      return 0;
-    }
-
-  return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
+  return 0;
 }
 
 /**
@@ -488,18 +328,9 @@ gnutls_crypto_mac_register2 (int priority, int version,
  * @version: should be set to %GNUTLS_CRYPTO_API_VERSION
  * @s: is a structure holding new interface's data
  *
- * This function will register a digest interface to be used by
- * gnutls. Any interface registered will override the included engine
- * and by convention kernel implemented interfaces should have
- * priority of 90. The interface with the lowest priority will be used
- * by gnutls.
+ * This function is a no-op.
  *
- * This function should be called before gnutls_global_init().
- *
- * For simplicity you can use the convenience
- * gnutls_crypto_digest_register() macro.
- *
- * Returns: %GNUTLS_E_SUCCESS on success, otherwise an error.
+ * Returns: always success (zero).
  *
  * Since: 2.6.0
  **/
@@ -507,18 +338,5 @@ int
 gnutls_crypto_digest_register2 (int priority, int version,
                                 const gnutls_crypto_digest_st * s)
 {
-  if (version != GNUTLS_CRYPTO_API_VERSION)
-    {
-      gnutls_assert ();
-      return GNUTLS_E_UNIMPLEMENTED_FEATURE;
-    }
-
-  if (crypto_digest_prio > priority)
-    {
-      memcpy (&_gnutls_digest_ops, s, sizeof (*s));
-      crypto_digest_prio = priority;
-      return 0;
-    }
-
-  return GNUTLS_E_CRYPTO_ALREADY_REGISTERED;
+  return 0;
 }
diff --git a/lib/includes/gnutls/crypto.h b/lib/includes/gnutls/crypto.h
index 0f61981..f75cb2f 100644
--- a/lib/includes/gnutls/crypto.h
+++ b/lib/includes/gnutls/crypto.h
@@ -101,6 +101,7 @@ extern "C"
     int (*hash) (void *ctx, const void *text, size_t textsize);
     int (*output) (void *src_ctx, void *digest, size_t digestsize);
     void (*deinit) (void *ctx);
+    int (*copy) (void **dst_ctx, void *src_ctx); /* unused - for backwards compat */
   } gnutls_crypto_mac_st;
 
   typedef struct
@@ -110,6 +111,7 @@ extern "C"
     int (*copy) (void **dst_ctx, void *src_ctx);
     int (*output) (void *src_ctx, void *digest, size_t digestsize);
     void (*deinit) (void *ctx);
+    int (*setkey) (void *ctx, const void *key, size_t keysize); /* unused - for backwards compat */
   } gnutls_crypto_digest_st;
 
 /**
diff --git a/tests/crypto_rng.c b/tests/crypto_rng.c
index fbeb10c..8cd8cdf 100644
--- a/tests/crypto_rng.c
+++ b/tests/crypto_rng.c
@@ -59,6 +59,7 @@ doit (void)
   int failed = 0;
   gnutls_crypto_rnd_st rng = { rng_init, rng_rnd, rng_deinit };
 
+  exit(77);
 
   rc = gnutls_crypto_rnd_register (0, &rng);
 
