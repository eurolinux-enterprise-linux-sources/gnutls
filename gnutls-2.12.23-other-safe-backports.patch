diff --git a/lib/ext_safe_renegotiation.c b/lib/ext_safe_renegotiation.c
index c34d450..af2445d 100644
--- a/lib/ext_safe_renegotiation.c
+++ b/lib/ext_safe_renegotiation.c
@@ -258,11 +258,6 @@ _gnutls_ext_sr_send_cs (gnutls_session_t session)
     {
       set = 1;
     }
-  else if (ret < 0)
-    {
-      gnutls_assert ();
-      return ret;
-    }
 
   if (set != 0)
     {
@@ -288,12 +283,16 @@ static int
 _gnutls_sr_recv_params (gnutls_session_t session,
                         const opaque * data, size_t _data_size)
 {
-  int len = data[0];
+  unsigned int len;
   ssize_t data_size = _data_size;
   sr_ext_st *priv;
   extension_priv_data_t epriv;
   int set = 0, ret;
 
+  if (data_size == 0)
+    return gnutls_assert_val(GNUTLS_E_UNEXPECTED_PACKET_LENGTH);
+
+  len = data[0];
   DECR_LEN (data_size, len + 1 /* count the first byte and payload */ );
 
   if (session->internals.priorities.sr == SR_DISABLED)
diff --git a/lib/ext_signature.c b/lib/ext_signature.c
index 008b026..c30e92a 100644
--- a/lib/ext_signature.c
+++ b/lib/ext_signature.c
@@ -131,6 +131,9 @@ _gnutls_sign_algorithm_parse_data (gnutls_session_t session,
   sig_ext_st *priv;
   extension_priv_data_t epriv;
 
+  if (data_size % 2 != 0)
+    return gnutls_assert_val(GNUTLS_E_UNEXPECTED_PACKET_LENGTH);
+
   priv = gnutls_calloc (1, sizeof (*priv));
   if (priv == NULL)
     {
diff --git a/lib/gnutls_algorithms.c b/lib/gnutls_algorithms.c
index 2734440..739e5bb 100644
--- a/lib/gnutls_algorithms.c
+++ b/lib/gnutls_algorithms.c
@@ -2145,7 +2145,8 @@ _gnutls_tls_aid_to_sign (const sign_algorithm_st * aid)
 {
   gnutls_sign_algorithm_t ret = GNUTLS_SIGN_UNKNOWN;
 
-  if (memcmp(aid, &unknown_tls_aid, sizeof(*aid))==0)
+  if (aid->hash_algorithm == unknown_tls_aid.hash_algorithm &&
+      aid->sign_algorithm == unknown_tls_aid.sign_algorithm)
     return ret;
 
   GNUTLS_SIGN_LOOP (if (p->aid.hash_algorithm == aid->hash_algorithm
@@ -2168,7 +2169,8 @@ _gnutls_sign_to_tls_aid (gnutls_sign_algorithm_t sign)
 
   GNUTLS_SIGN_ALG_LOOP (ret = &p->aid);
 
-  if (ret != NULL && memcmp(ret, &unknown_tls_aid, sizeof(*ret))==0)
+  if (ret != NULL && ret->hash_algorithm == unknown_tls_aid.hash_algorithm &&
+      ret->sign_algorithm == unknown_tls_aid.sign_algorithm)
     return NULL;
 
   return ret;
diff --git a/lib/gnutls_handshake.c b/lib/gnutls_handshake.c
index e652528..489418d 100644
--- a/lib/gnutls_handshake.c
+++ b/lib/gnutls_handshake.c
@@ -575,7 +575,7 @@ _gnutls_read_client_hello (gnutls_session_t session, opaque * data,
 
       resume_copy_required_values (session);
 
-      return _gnutls_user_hello_func (session, adv_version);
+      return 0;
     }
 
   /* select an appropriate cipher suite
@@ -2246,7 +2246,8 @@ _gnutls_send_server_hello (gnutls_session_t session, int again)
       datalen = 2 + session_id_len + 1 + GNUTLS_RANDOM_SIZE + 3;
       ret =
         _gnutls_gen_extensions (session, extdata, MAX_EXT_DATA_LENGTH,
-                                GNUTLS_EXT_ANY);
+                                (session->internals.resumed==RESUME_TRUE)?
+                                 GNUTLS_EXT_MANDATORY:GNUTLS_EXT_ANY);
 
       if (ret < 0)
         {
@@ -2707,7 +2708,6 @@ gnutls_handshake (gnutls_session_t session)
   return 0;
 }
 
-
 #define IMED_RET( str, ret, allow_alert) do { \
 	if (ret < 0) { \
 		/* EAGAIN and INTERRUPTED are always non-fatal */ \
@@ -2717,6 +2717,8 @@ gnutls_handshake (gnutls_session_t session)
 		if (allow_alert != 0 && ret==GNUTLS_E_WARNING_ALERT_RECEIVED) return ret; \
 		gnutls_assert(); \
 		ERR( str, ret); \
+		if (gnutls_error_is_fatal(ret) == 0) ret = gnutls_assert_val(GNUTLS_E_INTERNAL_ERROR); \
+		session->internals.invalid_connection = 1; \
 		_gnutls_handshake_hash_buffers_clear(session); \
 		return ret; \
 	} } while (0)
diff --git a/lib/gnutls_int.h b/lib/gnutls_int.h
index 6d5d89f..b0ecf8b 100644
--- a/lib/gnutls_int.h
+++ b/lib/gnutls_int.h
@@ -441,8 +441,6 @@ struct gnutls_priority_st
   priority_st cert_type;
   priority_st sign_algo;
 
-  /* to disable record padding */
-  int no_padding:1;
   int allow_large_records:1;
   safe_renegotiation_t sr;
   int ssl3_record_version:1;
diff --git a/lib/gnutls_priority.c b/lib/gnutls_priority.c
index bd8cb5a..7c21d17 100644
--- a/lib/gnutls_priority.c
+++ b/lib/gnutls_priority.c
@@ -176,13 +176,15 @@ gnutls_compression_set_priority (gnutls_session_t session, const int *list)
 int
 gnutls_protocol_set_priority (gnutls_session_t session, const int *list)
 {
-  _set_priority (&session->internals.priorities.protocol, list);
-
   /* set the current version to the first in the chain.
    * This will be overridden later.
    */
   if (list)
-    _gnutls_set_current_version (session, list[0]);
+    {
+      _set_priority (&session->internals.priorities.protocol, list);
+      _gnutls_set_current_version (session, list[0]);
+    }
+    
 
   return 0;
 }
@@ -586,7 +588,12 @@ gnutls_priority_init (gnutls_priority_t * priority_cache,
       else if (strcasecmp (broken_list[i], "NORMAL") == 0)
         {
           _set_priority (&(*priority_cache)->cipher, cipher_priority_normal);
-          _set_priority (&(*priority_cache)->kx, kx_priority_secure);
+          /* We give priority to RSA ciphersuites since the DHE-*
+           * ciphersuites have many compatibility issues (e.g.,
+           * if the security level agreed between peers does not match
+           * in DHE ciphersuites one can only tear down the connection).
+           */
+          _set_priority (&(*priority_cache)->kx, kx_priority_performance);
           _set_priority (&(*priority_cache)->mac, mac_priority_normal);
           _set_priority (&(*priority_cache)->sign_algo,
                          sign_priority_default);
@@ -727,7 +734,6 @@ gnutls_priority_init (gnutls_priority_t * priority_cache,
         {
           if (strcasecmp (&broken_list[i][1], "COMPAT") == 0)
             {
-              (*priority_cache)->no_padding = 1;
               (*priority_cache)->allow_large_records = 1;
             }
           else if (strcasecmp (&broken_list[i][1],
@@ -787,6 +793,7 @@ error:
     }
   gnutls_free (darg);
   gnutls_free (*priority_cache);
+  *priority_cache = NULL;
 
   return GNUTLS_E_INVALID_REQUEST;
 
diff --git a/lib/gnutls_record.c b/lib/gnutls_record.c
index d083fad..c5ba633 100644
--- a/lib/gnutls_record.c
+++ b/lib/gnutls_record.c
@@ -113,7 +113,7 @@ gnutls_transport_set_lowat (gnutls_session_t session, int num)
 void
 gnutls_record_disable_padding (gnutls_session_t session)
 {
-  session->internals.priorities.no_padding = 1;
+  return;
 }
 
 /**
@@ -441,9 +441,7 @@ _gnutls_send_int (gnutls_session_t session, content_type_t type,
       cipher_size =
         _gnutls_encrypt (session, headers, RECORD_HEADER_SIZE, data,
                          data2send_size, _mbuffer_get_udata_ptr (bufel),
-                         cipher_size, type,
-                         (session->internals.priorities.no_padding ==
-                          0) ? 1 : 0, record_params);
+                         cipher_size, type, 0, record_params);
       if (cipher_size <= 0)
         {
           gnutls_assert ();
diff --git a/lib/x509/common.c b/lib/x509/common.c
index 6e822ad..97eb42b 100644
--- a/lib/x509/common.c
+++ b/lib/x509/common.c
@@ -1472,7 +1472,7 @@ _gnutls_x509_get_signature (ASN1_TYPE src, const char *src_name,
       goto cleanup;
     }
 
-  if (bits % 8 != 0)
+  if (bits % 8 != 0 || bits < 8)
     {
       gnutls_assert ();
       result = GNUTLS_E_CERTIFICATE_ERROR;
diff --git a/lib/x509/privkey_pkcs8.c b/lib/x509/privkey_pkcs8.c
index 8684422..7e232eb 100644
--- a/lib/x509/privkey_pkcs8.c
+++ b/lib/x509/privkey_pkcs8.c
@@ -749,6 +749,7 @@ read_pkcs_schema_params (schema_id * schema, const char *password,
     case PKCS12_3DES_SHA1:
     case PKCS12_ARCFOUR_SHA1:
     case PKCS12_RC2_40_SHA1:
+      memset(enc_params, 0, sizeof(*enc_params));
 
       if ((*schema) == PKCS12_3DES_SHA1)
         {
diff --git a/lib/x509/verify.c b/lib/x509/verify.c
index d59002f..ba4fdcd 100644
--- a/lib/x509/verify.c
+++ b/lib/x509/verify.c
@@ -656,7 +656,10 @@ _gnutls_x509_verify_certificate (const gnutls_x509_crt_t * certificate_list,
        * certificates can exist in a supplied chain.
        */
       if (!(flags & GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT))
-        flags &= ~(GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT);
+        {
+          flags &= ~(GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT);
+          flags |= GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT;
+        }
       if ((ret =
            _gnutls_verify_certificate2 (certificate_list[i - 1],
                                         &certificate_list[i], 1, flags,
diff --git a/lib/x509/x509.c b/lib/x509/x509.c
index d12d44e..b9237ca 100644
--- a/lib/x509/x509.c
+++ b/lib/x509/x509.c
@@ -612,7 +612,7 @@ gnutls_x509_crt_get_signature (gnutls_x509_crt_t cert,
       return _gnutls_asn2err (result);
     }
 
-  if (bits % 8 != 0)
+  if (bits % 8 != 0 || bits < 8)
     {
       gnutls_assert ();
       return GNUTLS_E_CERTIFICATE_ERROR;
@@ -632,6 +632,7 @@ gnutls_x509_crt_get_signature (gnutls_x509_crt_t cert,
       gnutls_assert ();
       return _gnutls_asn2err (result);
     }
+  *sizeof_sig = len/8;
 
   return 0;
 }
diff --git a/src/certtool.c b/src/certtool.c
index 832ca53..b8da15e 100644
--- a/src/certtool.c
+++ b/src/certtool.c
@@ -943,7 +943,7 @@ generate_signed_crl (common_info_st * cinfo)
   crl = generate_crl (ca_crt, cinfo);
 
   fprintf (stderr, "\n");
-  result = gnutls_x509_crl_privkey_sign(crl, ca_crt, ca_key, SIGN_HASH, 0);
+  result = gnutls_x509_crl_privkey_sign(crl, ca_crt, ca_key, (default_dig != GNUTLS_DIG_UNKNOWN)?default_dig:SIGN_HASH, 0);
   if (result < 0)
     error (EXIT_FAILURE, 0, "crl_privkey_sign: %s", gnutls_strerror (result));
 
@@ -1919,7 +1919,7 @@ generate_request (common_info_st * cinfo)
   if (ret < 0)
     error (EXIT_FAILURE, 0, "set_key: %s", gnutls_strerror (ret));
 
-  ret = gnutls_x509_crq_privkey_sign (crq, pkey, SIGN_HASH, 0);
+  ret = gnutls_x509_crq_privkey_sign (crq, pkey, (default_dig != GNUTLS_DIG_UNKNOWN)?default_dig:SIGN_HASH, 0);
   if (ret < 0)
     error (EXIT_FAILURE, 0, "sign: %s", gnutls_strerror (ret));
 
diff --git a/lib/gnutls_str.c b/lib/gnutls_str.c
index d789d32..5537845 100644
--- a/lib/gnutls_str.c
+++ b/lib/gnutls_str.c
@@ -644,7 +644,11 @@ int
 _gnutls_buffer_append_data_prefix (gnutls_buffer_st * buf, const void *data,
                                    size_t data_size)
 {
-  _gnutls_buffer_append_prefix (buf, data_size);
+  int ret;
+  ret = _gnutls_buffer_append_prefix (buf, data_size);
+  if (ret < 0)
+    return ret;
+
   if (data_size > 0)
     return _gnutls_buffer_append_data (buf, data, data_size);
 
diff --git a/lib/gnutls_priority.c b/lib/gnutls_priority.c
index 76c6b77..91638c1 100644
--- a/lib/gnutls_priority.c
+++ b/lib/gnutls_priority.c
@@ -621,7 +621,7 @@ gnutls_priority_init (gnutls_priority_t * priority_cache,
             fn (&(*priority_cache)->kx, algo);
           else if (strncasecmp (&broken_list[i][1], "VERS-", 5) == 0)
             {
-              if (strncasecmp (&broken_list[i][1], "VERS-TLS-ALL", 12) == 0)
+              if (strncasecmp (&broken_list[i][1], "VERS-TLS-ALL", 12) == 0 || strncasecmp (&broken_list[i][1], "VERS-ALL", 8) == 0)
                 {
                   bulk_fn (&(*priority_cache)->protocol,
                                  protocol_priority);
@@ -693,11 +693,20 @@ gnutls_priority_init (gnutls_priority_t * priority_cache,
                   bulk_fn (&(*priority_cache)->mac,
                                 mac_priority_secure);
             }
-          else if (strncasecmp (&broken_list[i][1], "CIPHER-ALL", 7) == 0)
+          else if (strncasecmp (&broken_list[i][1], "CIPHER-ALL", 10) == 0)
             {
                   bulk_fn (&(*priority_cache)->cipher,
                                 cipher_priority_normal);
             }
+          else if (strncasecmp (&broken_list[i][1], "KX-ALL", 6) == 0)
+            {
+                  bulk_fn (&(*priority_cache)->kx,
+                                kx_priority_secure);
+            }
+          else if (strncasecmp (&broken_list[i][1], "CURVE-ALL", 9) == 0)
+            {
+              continue;
+            }
           else
             goto error;
         }
diff --git a/lib/gcrypt/pk.c b/lib/gcrypt/pk.c
index 26f7eef..3c2da57 100644
--- a/lib/gcrypt/pk.c
+++ b/lib/gcrypt/pk.c
@@ -640,7 +640,7 @@ _dsa_generate_params (bigint_t * resarr, int *resarr_len, int bits)
 }
 
 static int
-_rsa_generate_params (bigint_t * resarr, int *resarr_len, int bits)
+_rsa_generate_params (bigint_t * resarr, unsigned *resarr_len, int bits)
 {
 
   int ret, i;
