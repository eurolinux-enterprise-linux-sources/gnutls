diff --git a/doc/cha-auth.texi b/doc/cha-auth.texi
index f02fd97..e05a56e 100644
--- a/doc/cha-auth.texi
+++ b/doc/cha-auth.texi
@@ -12,8 +12,6 @@ are:
 
 @item Anonymous authentication
 
-@item @acronym{SRP} authentication
-
 @item @acronym{PSK} authentication
 
 @end itemize
@@ -21,7 +19,6 @@ are:
 @menu
 * Certificate authentication::
 * Anonymous authentication::
-* Authentication using SRP::
 * Authentication using PSK::
 * Authentication and credentials::
 * Parameters stored in credentials::
@@ -207,93 +204,6 @@ This algorithm exchanges Diffie-Hellman parameters.
 
 @end table
 
-@node Authentication using SRP
-@section Authentication using @acronym{SRP}
-@cindex @acronym{SRP} authentication
-
-Authentication via the Secure Remote Password protocol,
-@acronym{SRP}@footnote{@acronym{SRP} is described in @xcite{RFC2945}},
-is supported.  The @acronym{SRP} key exchange is an extension to the
-@acronym{TLS} protocol, and it is a password based authentication
-(unlike @acronym{X.509} or @acronym{OpenPGP} that use certificates).
-The two peers can be identified using a single password, or there can
-be combinations where the client is authenticated using @acronym{SRP}
-and the server using a certificate.
-
-The advantage of @acronym{SRP} authentication, over other proposed
-secure password authentication schemes, is that @acronym{SRP} does not
-require the server to hold the user's password.  This kind of
-protection is similar to the one used traditionally in the @emph{UNIX}
-@file{/etc/passwd} file, where the contents of this file did not cause
-harm to the system security if they were revealed.  The @acronym{SRP}
-needs instead of the plain password something called a verifier, which
-is calculated using the user's password, and if stolen cannot be used
-to impersonate the user. Check @xcite{TOMSRP} for a detailed
-description of the @acronym{SRP} protocol and the Stanford
-@acronym{SRP} libraries, which includes a PAM module that synchronizes
-the system's users passwords with the @acronym{SRP} password
-files. That way @acronym{SRP} authentication could be used for all the
-system's users.
-
-The implementation in @acronym{GnuTLS} is based on paper
-@xcite{TLSSRP}.  The supported @acronym{SRP} key exchange methods are:
-
-@table @code
-
-@item SRP:
-Authentication using the @acronym{SRP} protocol.
-
-@item SRP_DSS:
-Client authentication using the @acronym{SRP} protocol. Server is
-authenticated using a certificate with DSA parameters.
-
-@item SRP_RSA:
-Client authentication using the @acronym{SRP} protocol. Server is
-authenticated using a certificate with RSA parameters.
-
-@end table
-
-If clients supporting @acronym{SRP} know the username and password
-before the connection, should initialize the client credentials and
-call the function @ref{gnutls_srp_set_client_credentials}.
-Alternatively they could specify a callback function by using the
-function @ref{gnutls_srp_set_client_credentials_function}.  This has
-the advantage that allows probing the server for @acronym{SRP}
-support.  In that case the callback function will be called twice per
-handshake.  The first time is before the ciphersuite is negotiated,
-and if the callback returns a negative error code, the callback will
-be called again if @acronym{SRP} has been negotiated.  This uses a
-special @acronym{TLS}-@acronym{SRP} handshake idiom in order to avoid,
-in interactive applications, to ask the user for @acronym{SRP}
-password and username if the server does not negotiate an
-@acronym{SRP} ciphersuite.
-
-In server side the default behaviour of @acronym{GnuTLS} is to read
-the usernames and @acronym{SRP} verifiers from password files. These
-password files are the ones used by the @emph{Stanford srp libraries}
-and can be specified using the
-@ref{gnutls_srp_set_server_credentials_file}.  If a different
-password file format is to be used, then the function
-@ref{gnutls_srp_set_server_credentials_function}, should be called,
-in order to set an appropriate callback.
-
-Some helper functions such as
-
-@itemize
-
-@item @ref{gnutls_srp_verifier}
-
-@item @ref{gnutls_srp_base64_encode}
-
-@item @ref{gnutls_srp_base64_decode}
-
-@end itemize
-
-are included in @acronym{GnuTLS}, and can be used to generate and
-maintain @acronym{SRP} verifiers and password files.  A program to
-manipulate the required parameters for @acronym{SRP} authentication is
-also included.  @xref{srptool}, for more information.
-
 
 @node Authentication using PSK
 @section Authentication using @acronym{PSK}
@@ -346,7 +256,6 @@ specified by the TLS PSK document@footnote{GnuTLS used to provide
 @code{gnutls_psk_netconf_derive_key} which follows the algorithm
 specified in @file{draft-ietf-netconf-tls-02.txt}. This method
 is deprecated and might be removed in later versions of GnuTLS.}.
-For password-based authentication check @ref{Authentication using SRP}.
 
 Some helper functions such as:
 
diff --git a/doc/cha-library.texi b/doc/cha-library.texi
index 6c783be..2b53700 100644
--- a/doc/cha-library.texi
+++ b/doc/cha-library.texi
@@ -173,8 +173,7 @@ data to the transport layer.
 
 @end itemize
 
-Other callback functions such as the one set by
-@ref{gnutls_srp_set_server_credentials_function}, may require more
+Other callback functions may require more
 complicated input, including data to be allocated.  These callbacks
 should allocate and free memory using the functions shown below.
 
